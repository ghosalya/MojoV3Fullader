module mojo_top (
    input clk,              // 50MHz clock
    //input clkR,
    input rst_n,            // reset button (active low)
    output led [8],         // 8 user controllable LEDs
    input cclk,             // configuration clock, AVR ready when high
    output spi_miso,        // AVR SPI MISO
    input spi_ss,           // AVR SPI Slave Select
    input spi_mosi,         // AVR SPI MOSI
    input spi_sck,          // AVR SPI Clock
    output spi_channel [4], // AVR general purpose pins (used by default to select ADC channel)
    input avr_tx,           // AVR TX (FPGA RX)
    output avr_rx,          // AVR RX (FPGA TX)
    input avr_rx_busy,      // AVR RX buffer full
    
    output out_a[3],
    input in_sum,
    input in_carry,
    
    output io_led [3][8],   // LEDs on IO Shield
    //output io_seg [8],      // 7-segment LEDs on IO Shield
    //output io_sel [4],      // Digit select on IO Shield
    input io_button [5],    // 5 buttons on IO Shield
    input io_dip [3][8]     // DIP switches on IO Shield
    
    
  ) {
  
  sig rst;                  // reset signal
  
  .clk(clk) {
    // The reset conditioner is used to synchronize the reset signal to the FPGA
    // clock. This ensures the entire FPGA comes out of reset at the same time.
    reset_conditioner reset_cond;
    .rst(rst) {
    fsm testState = {IDLE, A, B, C, AB, AC, BC, ABC, O, FAIL};
    }
    dff counter[27];
  }
  
  always {
    reset_cond.in = ~rst_n; // input raw inverted reset signal
    rst = reset_cond.out;   // conditioned reset
    
    led = 8h00;             // turn LEDs off
    spi_miso = bz;          // not using SPI
    spi_channel = bzzzz;    // not using flags
    avr_rx = bz;            // not using serial port
    
    io_led = 3x{{8h00}};    // turn LEDs off
    //io_led[0][2:0] = io_dip[0][2:0];
    out_a[2:0] = io_dip[2][2:0];
    io_led[1][0] = in_sum;
    io_led[1][1] = in_carry;
    
    if ( io_dip[2][0] ^ io_dip[2][1] ^ io_dip[2][2] == in_sum) 
      { io_led[1][7] = 1; //indicate that sum is correct
      }
    if ((io_dip[2][0] & io_dip[2][1]) | ((io_dip[2][0] ^ io_dip[2][1]) &io_dip[2][2]) == in_carry) 
    {
      io_led[1][6] = 1; //indicate that sum is correct
    }
    
    
    if (counter.q[24:0] == 0) {
    //The automatic FSM works as follows:
    // 
      case(testState.q) { // checking for state change
    
      testState.O:
          if (in_carry == 0 & in_sum == 0) {
            testState.d = testState.IDLE;
          } else {
              testState.d = testState.FAIL;
          }
        
        testState.ABC:
          if (in_carry == 1 & in_sum == 1) {
            testState.d = testState.O;
          } else {
              testState.d = testState.FAIL;
          }
        
         testState.AC:
          if (in_carry == 1 & in_sum == 0) {
            testState.d = testState.ABC;
          } else {
              testState.d = testState.FAIL;
          }
        
        testState.BC:
          if (in_carry == 1 & in_sum == 0) {
            testState.d = testState.AC;
          } else {
              testState.d = testState.FAIL;
          }          
        
          
        testState.AB:
          if (in_carry == 1 & in_sum == 0) {
            testState.d = testState.BC;
          } else {
              testState.d = testState.FAIL;
          }
          
          
        
          testState.C:
          if (in_carry == 0 & in_sum == 1) {
            testState.d = testState.AB;
          } else {
              testState.d = testState.FAIL;
          }
        
          
        testState.B:
          if (in_carry == 0 & in_sum == 1) {
            testState.d = testState.C;
          } else {
              testState.d = testState.FAIL;
          }
        
        testState.A:
          if (in_carry == 0 & in_sum == 1) {
            testState.d = testState.B;
          } else {
              testState.d = testState.FAIL;
          }
        
        testState.IDLE:
          if (io_button[1] == 1){
            testState.d = testState.A;
          }
          
        testState.FAIL:
          if (counter.q == 0){
            testState.d = testState.IDLE;
          }
    }
    }
    counter.d = counter.q+1;
    
    case(testState.q) { // giving proper led output
    
      testState.O:
          out_a[2:0] = 000;
          io_led[0][0] = 1;
          
        
        testState.ABC:
          out_a[2:0] = 111;
          io_led[0][1]= 1; 
        
         testState.AC:
          out_a[2:0] = 101;
          io_led[0][2] = 1;
        
        testState.BC:
          out_a[2:0] = 110;
          io_led[0][3] = 1;
          
        testState.AB:
          out_a[2:0] = 011;
          io_led[0][4] = 1;
          
        
          testState.C:
          out_a[2:0] = 100;
          io_led[0][5] = 1;
        
          
        testState.B:
          out_a[2:0] = 010;
          io_led[0][6] = 1;
        
        testState.A:
          out_a[2:0] = 001;
          io_led[0][7] = 1;
        
        testState.IDLE:
          //if (counter.q[25] == 1) {
            io_led[1][3] = 1;  
          //} 
        
        testState.FAIL:
          if (counter.q[22] == 1) {
            io_led[1][3] = 1;  
          } 
    }
    
    //io_seg = 8hff;          // turn segments off
    //io_sel = 4hf;           // select no digits
  }
}